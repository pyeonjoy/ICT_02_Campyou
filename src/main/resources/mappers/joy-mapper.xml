<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="joy">
<!--관리자페이지 메인 -->
	<select id="getMemberCounts" resultType="avo">
		SELECT
		(SELECT count(member_idx) FROM members) AS totalMembers,
		(SELECT count(member_idx) FROM members WHERE member_regdate = now()) AS
		todayMembers,
		(SELECT count(member_idx) FROM members WHERE member_active = 0) AS
		unactiveMembers
	</select>

	<select id="boardmix" resultType="avo">
		SELECT count(b_idx) AS totalb_idx,
		count(t_idx) AS totalt_idx
		,count(cp_idx) AS totalcp_idx
		FROM members m
		inner join board_free b on m.member_idx = b.member_idx
		inner join board_with w on m.member_idx = w.member_idx
		inner join board_camp c on m.member_idx = c.member_idx
	</select>

	<select id="adminmainqna" resultType="int">
		SELECT count(pm_idx) AS totalpm_idx
		FROM with_promise
	</select>

	<select id="adminmainmatch" resultType="int">
		SELECT count(qna_idx) AS totalqnl
		FROM qna
		WHERE qna_status = 0
	</select>

	<select id="adminmainreport" resultType="int">
		SELECT count(report_idx) AS totalreport
		FROM admin_report
		WHERE report_date = now()
	</select>
	<select id="adminmemberreport" resultType="amvo">
		SELECT *
		FROM members
		WHERE member_idx =#{member_idx}
	</select>

<!-- 회원정보 -->

	<select id="boardall" resultType="amvo" parameterType="String">
	    SELECT *
	    FROM members m
	    INNER JOIN board_free b ON m.member_idx = b.member_idx
	    INNER JOIN board_camp c ON m.member_idx = c.member_idx
	   <!--  WHERE m.member_idx = #{member_idx} -->
	</select>
	<select id="reportall" resultType="int">
		SELECT count(report_idx)
		FROM admin_report
		WHERE reportmember_idx =#{member_idx}
	</select>
	<select id="memberedit" resultType="amvo" parameterType="amvo">
		update members
		set member_id = #{member_id}, member_name = #{member_name},
		member_nickname = #{member_nickname}, member_dob = #{member_dob},
		member_phone = #{member_phone}, member_email = #{member_email},
		member_regdate = #{member_regdate}
		where member_idx =#{member_idx}
	</select>
	<select id="memberstop" resultType="amvo" parameterType="String">
		update members set member_active = 0
		where member_idx =#{member_idx}
	</select>
	<update id="memberstopcancel" parameterType="String">
		update members set member_active = 1
		where member_idx =#{member_idx}
	</update>
	<update id="memberupgrade" parameterType="String">
		update members set member_grade = 1
		where member_idx =#{member_idx}
	</update>
	<select id="removeimg" parameterType="String">
		update members set member_img = DEFAULT
		where member_idx =#{member_idx}
	</select>
	<select id="getwithboard" resultType="avo">
		SELECT *
		FROM board_with
		ORDER BY t_hit DESC
		LIMIT 5;
	</select>
	<select id="camphit" resultType="cvo">
		SELECT *
		FROM camp_list
		ORDER BY hit DESC
		LIMIT 3;
	</select>
	
<!-- 팝업  -->
	<insert id="popUPWrite" parameterType="avo">
		insert into popup(writer,title, regdate, f_name)
		values(#{writer},#{title},sysdate(), #{f_name})
	</insert>
	<select id="count" resultType="int">
		select count(*) from popup
	</select>
	<select id="count2" resultType="int">
		select count(*) from members
	</select>
	<select id="popUPlist" parameterType="Map" resultType="avo">
		SELECT * FROM popup ORDER BY popidx DESC LIMIT  #{limit} OFFSET #{offset} 
		
	</select>
	<select id="popmain" parameterType="String" resultType="String">
		SELECT * FROM popup where active=1
	</select>
	<update id="popupdate" parameterType="avo">
    UPDATE popup 
	SET active = 1 
	WHERE popidx = #{popidx}
	</update>
	<update id="popupdate2" parameterType="avo">
    UPDATE popup 
	SET active = 0 
	WHERE popidx != #{popidx}
	</update>
	<select id="allmember" resultType="mvo">
		SELECT *
		FROM members
		ORDER BY member_idx DESC LIMIT  #{limit} OFFSET #{offset}
	</select>
	<delete id="popdelete" parameterType="String">
	DELETE FROM popup WHERE popidx = #{popidx}
	</delete>
	<select id="getradmineporteach" resultType="amvo" parameterType="String">
		SELECT *
		FROM admin_report
		where reportmember_idx =#{member_idx}
	</select>
	<update id="adminreport" parameterType="map">
    UPDATE admin_report
	SET report_day = #{report_day} 
	WHERE report_idx = #{report_idx}
	</update>
	<!-- 회원정보- 회원 정지시키는 메퍼 -->
	<update id="adminreportadd"  parameterType="map">
		UPDATE admin_report r
			INNER JOIN members m ON r.member_idx = m.member_idx
			INNER JOIN admin a ON a.admin_idx = r.admin_idx
			SET r.report_ok_date = CASE 
			                            WHEN r.report_day = #{report_day} THEN DATE_ADD(NOW(), INTERVAL #{report_day} DAY)
			                            ELSE r.report_ok_date
			                        END,
		    m.member_active = -1,
		    r.report_status = 1,
		    r.report_now_date = NOW(),
		    r.admin_idx = #{admin_idx}
		WHERE r.member_idx = #{member_idx};

	</update>
	<!-- 회원정보- 회원 정지 풀리는 메퍼 -->
	<update id="statusupdate"  parameterType="String">
	UPDATE admin_report a
	INNER JOIN members m ON a.member_idx = m.member_idx
	SET a.report_status = 1, m.member_active = 0
	WHERE DATE(a.report_ok_date)&lt;= CURDATE();
	</update>
	<insert id="reportwriteok" parameterType="avo">
		insert into admin_report(report_content,reportmember_idx,member_idx,report_date,report_now_date,report_ok_date)
		values(#{report_content},#{reportmember_idx},#{member_idx},sysdate(),sysdate(),sysdate())
	</insert>
	
	
	
	
	
	
	
	
	
	
	
</mapper>
