<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">

	<!-- Create Account & Login & find ID and Pwd -->
	<insert id="insert" parameterType="mvo">
		insert into members(member_id, member_name, member_pwd, member_nickname, member_dob, member_phone, member_email, member_gender, member_regdate)
			values(#{member_id}, #{member_name},#{member_pwd},#{member_nickname},#{member_dob}, #{member_phone},#{member_email}, #{member_gender}, sysdate())
	</insert>
	
	<!-- 카카오 로그인 -->
	<select id="search_kakao_id_in_db" parameterType="Map" resultType="mvo">
    	select * from members where member_id =#{member_id}
    </select>
	
	 <!-- 카카오 맴버 insert -->
	 <insert id="insert_kakao_info_for_log_in" parameterType="Map">
        insert into members(member_id, member_name, member_pwd, member_nickname, member_dob, member_phone, member_email, member_regdate)
        	values(#{member_id}, #{member_name}, #{member_pwd}, #{member_nickname}, #{member_dob}, #{member_phone}, #{member_email}, sysdate())
    </insert>
    
  	<!-- 카카오 맴버 체크 -->
	<select id="kakao_member_check" parameterType="Map" resultType="mvo">
    	select * from members where member_id =#{member_id}
    </select>
    
    <!-- 네이버 로그인 -->
	<select id="search_naver_id_in_db" parameterType="Map" resultType="mvo">
    	select * from members where member_id =#{member_id}
    </select>
	
	 <!-- 네이버 맴버 insert -->
	 <insert id="insert_naver_info_for_log_in" parameterType="Map">
        insert into members(member_id, member_name, member_pwd, member_nickname, member_dob, member_phone, member_email, member_regdate)
        	values(#{member_id}, #{member_name}, #{member_pwd}, #{member_nickname}, #{member_dob}, #{member_phone}, #{member_email}, sysdate())
    </insert>
    
    <!-- 네이버 맴버 체크 -->
	<select id="naver_member_check" parameterType="Map" resultType="mvo">
    	select * from members where member_id =#{member_id}
    </select>
    
	<insert id="admin_insert" parameterType="admvo">
		insert into admin(admin_id, admin_pwd, admin_name, admin_nickname, admin_phone, admin_email, admin_status, groups, step, lev)
			values(#{admin_id}, #{admin_pwd},#{admin_name},#{admin_nickname},#{admin_phone}, #{admin_email}, 0, 0, 0, 0)
	</insert>
	
	<select id="idchk" parameterType="String" resultType="int">
 		select count(*) from members where member_id=#{member_id}
 	</select>
 	
 	<!-- 관리자 페이지 페이지수 카운트 -->
 	<select id="admin_page_count" resultType="int">
 		select count(*) from admin
 	</select>
 	
 	<!-- 관리자 가입 아이디 중복체크  -->
 	<select id="adminidchk" parameterType="String" resultType="int">
 		select count(*) from admin where admin_id=#{admin_id}
 	</select>
 	
 	<!-- 관리자 권한 주기 업데이트 -->
 	<update id="give_admin_permission_update" parameterType="admvo">
 		update admin
        set admin_status= 1
        where admin_idx = #{admin_idx}
 	</update>
 	
 	<!-- 관리자 권한 빼앗기 업데이트 -->
 	<update id="revoke_admin_permission_update" parameterType="admvo">
 		update admin
        set admin_status= 0
        where admin_idx = #{admin_idx}
 	</update>
 	
 	<!-- 슈퍼관리자가 부하관리자 강제삭제 -->
 	<delete id="assistant_admin_delete" parameterType="admvo">
 		delete from admin where admin_idx = #{admin_idx}
 	</delete>
 	
 	<!-- 관리자 관리자 정보 가지고 오기 -->
 	<select id="admin_info_update" parameterType="String" resultType="admvo">
 		select * from admin where admin_idx=#{admin_idx}
 	</select>
 	
 	<!-- 관리자 정보수정 -->
 	<update id="admin_update_ok" parameterType="admvo">
 		update admin
        set admin_name=#{admin_name},
        	admin_nickname=#{admin_nickname},
        	admin_phone=#{admin_phone},
        	admin_email=#{admin_email} 
        where admin_idx = #{admin_idx}
 	</update>
 	
 	<select id="loginIdchk" parameterType="String" resultType="int">
 		select count(*) from members where member_id=#{member_id}
 	</select>

 	<select id="login" parameterType="mvo" resultType="mvo">
 		select * from members where member_id=#{member_id}
 	</select>
 	
 	<select id="admin_login" parameterType="admvo" resultType="admvo">
 		select * from admin where admin_id=#{admin_id}
 	</select>
 	
 	<select id="findPwd" parameterType="mvo" resultType="mvo">
		select * from members where member_id=#{member_id}
	</select>
	
	<update id="tempPwdUpdate" parameterType="mvo">
         update members
         set member_pwd=#{member_pwd}
         where member_id = #{member_id}
    </update>
    
    <select id="findId" parameterType="String" resultType="mvo">
		select * from members where member_name=#{member_name}
	</select>
	
	<select id="nickNameChk" parameterType="String" resultType="int">
 		select count(*) from members where member_nickname=#{member_nickname}
 	</select>
 	
 	<!-- Community Board -->
 	<select id="count" resultType="int">
 		select count(*) from board_free
 	</select>
 	
 	<!-- commBoard  -->
 	<!-- <select id="comm_board_list" parameterType="Map" resultType="cbvo">
 		select * from board_free order by groups member_grade  limit #{limit} offset #{offset}
		select * from board_free order by groups desc, lev asc  limit #{limit} offset #{offset} 
 	</select> -->
 	
 	<!-- <select id="comm_board_list" parameterType="Map" resultType="cbvo">
	    select * from board_free 
	    where b_type = '공지사항'
	    union 
	    select * from board_free 
	    where b_type != '공지사항' 
	    order by b_type = '공지사항' desc, groups desc, lev asc 
	    limit #{limit} offset #{offset}
	</select> -->
	
	<select id="comm_board_list" parameterType="Map" resultType="cbvo">
		    select * from board_free 
		    where admin_nickname = '관리자'
		    union 
		    select * from board_free 
		    where admin_nickname != '관리자' 
		    order by admin_nickname = '관리자' desc, groups desc, lev asc 
	    limit #{limit} offset #{offset}
	</select> 
	
	<!-- 관리자 리스트 -->
	<select id="admin_list" parameterType="Map" resultType="admvo">
 		<!-- select * from admin order by groups desc, lev asc  limit #{limit} offset #{offset} --> 
 		select * from admin 
	    where admin_id = 'admin'
	    union 
	    select * from admin 
	    where admin_id != 'admin' 
	    order by admin_id = 'admin' desc, groups desc, lev asc 
	    limit #{limit} offset #{offset}
 	</select>
 	
 	<update id="comm_board_hit" parameterType="String">
 		update board_free 
 		set b_hit = b_hit + 1 
 		where b_idx = #{b_idx} 
 	</update>
 	
 	<!-- 'admin'  추가 -->
 	<insert id="comm_board_insert" parameterType="cbvo">
 		<selectKey keyProperty="groups" resultType="String" order="BEFORE">
 			SELECT (IFNULL(MAX(b_idx),0)+1) as groups FROM board_free
 		</selectKey>
 		insert into board_free(member_idx, admin_idx, b_type, b_subject, member_nickname, admin_nickname, b_content, b_pwd, b_hit, groups, step, lev, b_regdate, bf_name)
 			values(#{member_idx}, #{admin_idx}, #{b_type}, #{b_subject}, #{member_nickname}, #{admin_nickname}, #{b_content},#{b_pwd}, 0, #{groups}, 0, 0, sysdate(), #{bf_name})
 	</insert>
 	
 	<select id="comm_board_detail" parameterType="String" resultType="cbvo">
 		select * from board_free where b_idx = #{b_idx}
 	</select>
 	
 	<delete id="comm_board_delete" parameterType="cbvo">
 	 	delete from board_free where b_idx = #{b_idx}
 	</delete>
 	
 	<update id="comm_board_update" parameterType="cbvo">
 	 	update board_free 
 	 	set  b_subject=#{b_subject}, b_content=#{b_content}, bf_name=#{bf_name}
 	 	where b_idx = #{b_idx}  	 
 	 </update>
 	 
 	 <delete id="comm_board_admin_delete" parameterType="cbvo">
 	 	delete from board_free where b_idx = #{b_idx}
 	 </delete>
 	 
 	  <insert id="comm_reply_insert" parameterType="cbvo">
 	 	insert into board_free(member_idx, b_type, b_subject, member_nickname, b_content, b_pwd, b_hit, groups, step, lev, b_regdate, bf_name)
 			values(#{member_idx}, #{b_type}, #{b_subject}, #{member_nickname}, #{b_content},#{b_pwd}, 0, #{groups}, 0, 0, sysdate(), #{bf_name})
 	  </insert>
 	 
 	 <select id="comm_board_reply_detail" parameterType="cbvo" resultType="cbvo">
 		select * from board_free where b_idx = #{b_idx}
 	 </select>
 	
 	<!-- commet-rely -->
 	<select id="comment_list" parameterType="String" resultType="covo">
 		select * from f_comment where b_idx = #{b_idx}
 	</select>
 	
 	<!-- <insert id="comment_insert" parameterType="covo">
 		insert into comment_t(member_nickname, content, write_date, b_idx)
 			values(#{member_nickname}, #{content}, sysdate(), #{b_idx})
 	</insert> -->
 	
 <!-- 	<insert id="comment_insert" parameterType="covo">
 		<selectKey keyProperty="groups" resultType="String" order="BEFORE">
 			SELECT (IFNULL(MAX(b_idx),0)+1) as groups FROM board_free
 		</selectKey>
 		insert into board_free(member_idx, b_type, b_subject, member_nickname, b_content, b_pwd, b_hit, groups, step, lev, b_regdate, bf_name)
 			values(#{member_idx}, #{b_type}, #{b_subject}, #{member_nickname}, #{b_content},#{b_pwd}, 0, #{groups}, 0, 0, sysdate(), #{bf_name})
 	</insert>
 	 -->
 	 
 	<insert id="comment_insert" parameterType="covo">
 		<selectKey keyProperty="groups" resultType="String" order="BEFORE">
 			SELECT (IFNULL(MAX(b_idx),0)+1) as groups FROM f_comment
 		</selectKey>
 		insert into f_comment(member_nickname, admin_nickname, content, write_date, b_idx, groups, step, lev)
 			values(#{member_nickname}, #{admin_nickname}, #{content}, sysdate(), #{b_idx}, #{groups}, 0, 0)
 	</insert>
 	
 	<delete id="comment_delete" parameterType="String">
 		delete from f_comment where c_idx = #{c_idx}
 	</delete>
 	
 	<update id="comment_update" parameterType="covo">
 		update f_comment 
 		set content = #{content}, write_date = sysdate()
 	    where b_idx=#{b_idx} and c_idx = #{c_idx}
 	</update>
 	
 	<select id="comment_reply_list" parameterType="String" resultType="covo">
 		select * from f_comment where b_idx = #{b_idx}
 	</select>
 	
 	<update id="comm_lev_update" parameterType="Map">
 	 	update f_comment set lev=lev+1 where groups=#{groups} and lev>=#{lev} 
 	 </update>
 	
 	 <!-- 수정했음 -->
 	 <insert id="comment_reply_insert" parameterType="covo">
 	 	insert into f_comment(member_nickname, admin_nickname, content, write_date, b_idx, group, step, lev)
 			values(#{member_nickname}, #{admin_nickname}, #{content}, sysdate(), #{b_idx}, #{group}, #{step}, #{lev})
 	 </insert>
 	 
 	 
 	<select id="board_free_list" resultType="bfvo">
 		select * from board_free where bf_no &gt;= 1 and bf_no &lt;= 100  order by bf_no
 	</select>
 	
 	<select id="board_free_search_list" parameterType="Map" resultType="bfvo">
 		select * from board_free where 
 		<choose>
 			<!-- <when test="searchType == 1"> Lower(b_title) = Lower(#{searchValue})</when> -->
 			
 			<when test="searchType == 1"> Lower(b_subject) like concat('%', Lower(#{searchValue}),'%')</when>
 			<when test="searchType == 2"> Lower(b_content) like concat('%', Lower(#{searchValue}), '%')</when>
 			<when test="searchType == 3"> Lower(member_nickname) = Lower(#{searchValue})</when>
 			<when test="searchType == 4"> Lower(b_regdate) like concat( Lower(#{searchValue}), '%')</when>
 		</choose>
 	</select>
 	
 	<select id="member" parameterType="String" resultType="covo">
 		select * from f_comment where b_idx=#{b_idx}
 	</select>
 		
 	
 	 <insert id="ans_insert1" parameterType="covo">
 	 	insert into f_comment(member_nickname, admin_nickname, content, write_date, b_idx, groups, step, lev)
 			values(#{member_nickname}, #{admin_nickname}, #{content}, sysdate(), #{b_idx}, #{groups}, #{step}, #{lev})
 	 </insert>
 	 
 	<!--  <insert id="ans_insert" parameterType="covo">
 	 	insert into comment_t(member_nickname, content, write_date, b_idx, step, lev)
 			values(#{member_nickname}, #{content}, sysdate(), #{b_idx}, #{step}, #{lev})
 	 </insert> -->
 	
 	
 	
 	<select id="commet_reply_detail" parameterType="String" resultType="covo">
 		select * from f_comment where c_idx = #{c_idx}
 	</select>
 	
 	
 	<!-- 캠핑제품추천게시판  -->
 	
 	<!-- 전체 게시물수  -->
 	<select id="cgb_count" resultType="int">
 		select count(*) from board_camp
 	</select>
 	
 	<!-- 리스트 -->
 	<!-- <select id="cgb_list" parameterType="Map" resultType="cgbvo">
 		select * from board_camp order by groups desc, lev asc  limit #{limit} offset #{offset} 
 	</select> -->
 	
 	<!-- 캠핑게시판 공지사항 위로 올리는 코드  -->
 	<select id="cgb_list" parameterType="Map" resultType="cgbvo">
		    select * from board_camp 
		    where admin_nickname = '관리자'
		    union 
		    select * from board_camp 
		    where admin_nickname != '관리자' 
		    order by admin_nickname = '관리자' desc, groups desc, lev asc 
	    limit #{limit} offset #{offset}
	</select> 
 	
 	<!-- 게시판 글쓰기 삽입  -->
 	<insert id="camping_gear_write_insert" parameterType="cgbvo">
 		<selectKey keyProperty="groups" resultType="String" order="BEFORE">
 			SELECT (IFNULL(MAX(cp_idx),0)+1) as groups FROM board_camp
 		</selectKey>
 		insert into board_camp(member_idx, admin_idx, cp_subject, member_nickname, admin_nickname, cp_content, cp_pwd, cpf_name, cp_regdate, cp_hit, cp_active, cp_notice, groups, step, lev)
 			values(#{member_idx}, #{admin_idx}, #{cp_subject}, #{member_nickname}, #{admin_nickname}, #{cp_content},#{cp_pwd},#{cpf_name}, sysdate(), 0, 0, 0, #{groups}, 0, 0)
 	</insert>
 	
 	
 	<!-- 게시판 조회수 -->
 	<update id="camping_gear_hit" parameterType="String">
 		update board_camp 
 		set cp_hit = cp_hit + 1 
 		where cp_idx = #{cp_idx} 
 	</update>
 
 	<!-- 게시판 개인정보 상세보기 -->
 	<select id="camping_gear_detail" parameterType="String" resultType="cgbvo">
 		select * from board_camp where cp_idx = #{cp_idx}
 	</select>
 	
 	<!-- 게시판 수정 -->
 	<update id="camping_gear_update" parameterType="cgbvo">
 	 	update board_camp 
 	 	set  cp_subject=#{cp_subject}, cp_content=#{cp_content}, cpf_name=#{cpf_name}
 	 	where cp_idx = #{cp_idx}  	 
 	 </update>
 	 
 	 <!-- 게시판 삭제 -->
 	 <delete id="camping_gear_delete" parameterType="cgbvo">
 	 	delete from board_camp where cp_idx = #{cp_idx}
 	 </delete>
 	 
 	 <!-- 관리자 게시판 강제 삭제 -->
 	 <delete id="camping_gear_admin_delete" parameterType="cgbvo">
 	 	delete from board_camp where cp_idx = #{cp_idx}
 	 </delete>
 	 
 	 <!-- 캠핑추천게시판 댓글 목록 가져오기 --> <!-- c_comment == cgb_comment -->
 	 <select id="camping_gear_comment_list" parameterType="String" resultType="cgbcvo">
 		select * from c_comment where cp_idx = #{cp_idx}
 	 </select>
 	 
 	 <!-- 댓글 삽입 -->
 	 <insert id="camping_gear_comment_insert" parameterType="cgbcvo">
 		<selectKey keyProperty="groups" resultType="String" order="BEFORE">
 			SELECT (IFNULL(MAX(cp_idx),0)+1) as groups FROM c_comment
 		</selectKey>
 		insert into c_comment(member_nickname, admin_nickname, content, write_date, cp_idx, groups, step, lev)
 			values(#{member_nickname}, #{admin_nickname}, #{content}, sysdate(), #{cp_idx}, #{groups}, 0, 0)
 	</insert>
 	
 	<!-- 댓글 삭제 -->
 	<delete id="camping_gear_comment_delete" parameterType="String">
 		delete from c_comment where c_idx = #{c_idx}
 	</delete>
 	
 	<!-- 댓글 수정 -->
 	<update id="camping_gear_comment_update" parameterType="cgbcvo">
 		update c_comment 
 		set content = #{content}, write_date = sysdate()
 	    where cp_idx=#{cp_idx} and c_idx = #{c_idx}
 	</update>
 	
 	<!-- 댓글댓글 -->
 	<select id="camping_gear_comment_reply_list" parameterType="String" resultType="cgbcvo">
 		select * from c_comment where cp_idx = #{cp_idx}
 	</select>
 	
 	<!-- 댓글댓글 -->
 	<update id="camping_gear_comm_lev_update" parameterType="Map">
 	 	update c_comment set lev=lev+1 where groups=#{groups} and lev>=#{lev} 
 	 </update>
 	 
 	 <!-- 댓글댓글 -->
 	 <insert id="camping_gear_ans_insert" parameterType="cgbcvo">
 	 	insert into c_comment(member_nickname, content, write_date, cp_idx, groups, step, lev)
 			values(#{member_nickname}, #{content}, sysdate(), #{cp_idx}, #{groups}, #{step}, #{lev})
 	 </insert>
 	 
 	 <!-- 댓글댓글 목록 디테일 가져오기 -->
 	 <select id="camping_gear_reply_detail" parameterType="String" resultType="cgbcvo">
 		select * from c_comment where c_idx = #{c_idx}
 	</select>
 	
 	<!-- 캠핑추천 검색 -->
 	<select id="camping_gear_search_list" resultType="cgsvo">
 		select * from board_camp where bf_no &gt;= 1 and bf_no &lt;= 100  order by bf_no
 	</select>
 	
 	<!-- 캠핑추천 검색 -->
 	<select id="camping_gear_search_list_ok" parameterType="Map" resultType="cgsvo">
 		select * from board_camp where 
 		<choose>
 			<!-- <when test="searchType == 1"> Lower(b_title) = Lower(#{searchValue})</when> -->
 			
 			<when test="searchType == 1"> Lower(cp_subject) like concat('%', Lower(#{searchValue}),'%')</when>
 			<when test="searchType == 2"> Lower(cp_content) like concat('%', Lower(#{searchValue}), '%')</when>
 			<when test="searchType == 3"> Lower(member_nickname) = Lower(#{searchValue})</when>
 			<when test="searchType == 4"> Lower(cp_regdate) like concat( Lower(#{searchValue}), '%')</when>
 		</choose>
 	</select>
 	
 	<!-- 게시판내 검색 기능  -->
 	<select id="camping_board_search_list2" parameterType="Map" resultType="cgsvo">
	    
	    select * from board_camp by groups desc, lev asc  limit #{limit} offset #{offset}  
	</select>
	
	<!-- 자유 게시판과 캠핑게시판 글쓸때 마다 member_free 등급 올리기 -->
	<update id="member_free_update" parameterType="String">
 	 	update members 
 	 	set member_free = member_free + 1
 	 	where member_idx = #{member_idx}  	 
 	 </update>
</mapper>